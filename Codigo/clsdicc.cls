VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
  Persistable = 0  'NotPersistable
  DataBindingBehavior = 0  'vbNone
  DataSourceBehavior  = 0  'vbNone
  MTSTransactionMode  = 0  'NotAnMTSObject
END
Attribute VB_Name = "diccionario"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = True
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
' Argentum 20 Game Server
'
'    Copyright (C) 2023 Noland Studios LTD
'
'    This program is free software: you can redistribute it and/or modify
'    it under the terms of the GNU Affero General Public License as published by
'    the Free Software Foundation, either version 3 of the License, or
'    (at your option) any later version.
'
'    This program is distributed in the hope that it will be useful,
'    but WITHOUT ANY WARRANTY; without even the implied warranty of
'    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'    GNU Affero General Public License for more details.
'
'    You should have received a copy of the GNU Affero General Public License
'    along with this program.  If not, see <https://www.gnu.org/licenses/>.
'
'    This program was based on Argentum Online 0.11.6
'    Copyright (C) 2002 MÃ¡rquez Pablo Ignacio
'
'    Argentum Online is based on Baronsoft's VB6 Online RPG
'    You can contact the original creator of ORE at aaron@baronsoft.com
'    for more information about ORE please visit http://www.baronsoft.com/
'
'
'
Option Explicit

Private Const MAX_ELEM = 100

Private Type t_diccElem

    clave As String
    def As Variant

End Type

Private p_elementos(1 To MAX_ELEM) As t_diccElem 'visual basic es una mierda para usar memoria dinamica, asi que uso esto

Private p_cant                     As Integer

Public Sub Class_Initialize()
    On Error Goto Class_Initialize_Err
        'constructor
        
        On Error GoTo Class_Initialize_Err
        
100     p_cant = 0

        
        Exit Sub

Class_Initialize_Err:
102     Call TraceError(Err.Number, Err.Description, "diccionario.Class_Initialize", Erl)
104
        
    Exit Sub
Class_Initialize_Err:
    Call TraceError(Err.Number, Err.Description, "clsdicc.Class_Initialize", Erl)
End Sub

Public Sub Class_Terminate()
    On Error Goto Class_Terminate_Err

    'destructor
    'destruir los variants?????
    Exit Sub
Class_Terminate_Err:
    Call TraceError(Err.Number, Err.Description, "clsdicc.Class_Terminate", Erl)
End Sub

Public Property Get CantElem() As Integer
        
        On Error GoTo CantElem_Err
        
100     CantElem = p_cant

        
        Exit Property

CantElem_Err:
102     Call TraceError(Err.Number, Err.Description, "diccionario.CantElem", Erl)
104
        
End Property

Public Function AtPut(ByVal clave As String, ByRef elem As Variant) As Boolean
    On Error Goto AtPut_Err
        
        On Error GoTo AtPut_Err
        

        Dim i As Integer

100     AtPut = False

102     If LenB(clave) = 0 Then Exit Function

104     clave = UCase$(clave)

106     If p_cant = MAX_ELEM Then
108         AtPut = False
        Else

110         For i = 1 To p_cant

112             If clave = p_elementos(i).clave Then
114                 p_elementos(i).def = elem
116                 AtPut = True

                    Exit For    ' epa ;)

                End If

118         Next i

120         If Not AtPut Then
122             p_cant = p_cant + 1
124             p_elementos(p_cant).def = elem
126             p_elementos(p_cant).clave = clave
128             AtPut = True

            End If

        End If

        
        Exit Function

AtPut_Err:
130     Call TraceError(Err.Number, Err.Description, "diccionario.AtPut", Erl)
132
        
    Exit Function
AtPut_Err:
    Call TraceError(Err.Number, Err.Description, "clsdicc.AtPut", Erl)
End Function

Public Function At(ByVal clave As String) As Variant
    On Error Goto At_Err
        
        On Error GoTo At_Err
        

        Dim i As Integer

100     clave = UCase$(clave)

102     At = Null

104     For i = 1 To p_cant

106         If clave = p_elementos(i).clave Then
108             At = p_elementos(i).def
                Exit Function

            End If

110     Next i

        
        Exit Function

At_Err:
112     Call TraceError(Err.Number, Err.Description, "diccionario.At", Erl)
114
        
    Exit Function
At_Err:
    Call TraceError(Err.Number, Err.Description, "clsdicc.At", Erl)
End Function

Public Function AtIndex(ByVal i As Integer) As String
    On Error Goto AtIndex_Err
        
        On Error GoTo AtIndex_Err
        
100     AtIndex = p_elementos(i).clave

        
        Exit Function

AtIndex_Err:
102     Call TraceError(Err.Number, Err.Description, "diccionario.AtIndex", Erl)
104
        
    Exit Function
AtIndex_Err:
    Call TraceError(Err.Number, Err.Description, "clsdicc.AtIndex", Erl)
End Function

Public Function MayorValor(ByRef cant As Integer) As String
    On Error Goto MayorValor_Err
        
        On Error GoTo MayorValor_Err
        

        'parchecito para el AO, me da la clave con mayor valor en valor
        'y la cantidad de claves con ese valor (por si hay empate)
        Dim i     As Integer

        Dim max   As Integer

        Dim clave As String

100     max = -1
102     cant = 0
104     clave = vbNullString

106     For i = 1 To p_cant

108         If max <= CInt(p_elementos(i).def) Then
110             cant = IIf(max = CInt(p_elementos(i).def), cant + 1, 1)
112             clave = IIf(max = CInt(p_elementos(i).def), clave & "," & p_elementos(i).clave, p_elementos(i).clave)
114             max = CInt(p_elementos(i).def)

            End If

116     Next i

118     MayorValor = clave

        
        Exit Function

MayorValor_Err:
120     Call TraceError(Err.Number, Err.Description, "diccionario.MayorValor", Erl)
122
        
    Exit Function
MayorValor_Err:
    Call TraceError(Err.Number, Err.Description, "clsdicc.MayorValor", Erl)
End Function

Public Sub DumpAll()
    On Error Goto DumpAll_Err
        
        On Error GoTo DumpAll_Err
        

        Dim i As Integer

100     For i = 1 To MAX_ELEM
102         p_elementos(i).clave = vbNullString
104         p_elementos(i).def = Null
106     Next i

108     p_cant = 0

        
        Exit Sub

DumpAll_Err:
110     Call TraceError(Err.Number, Err.Description, "diccionario.DumpAll", Erl)
112
        
    Exit Sub
DumpAll_Err:
    Call TraceError(Err.Number, Err.Description, "clsdicc.DumpAll", Erl)
End Sub
